---
import type { Experience } from "../../data/experiences";
export interface Props {
    experience: Experience;
}

const { experience } = Astro.props;
---

<article class="mb-8">
    <div class="flex justify-between items-start">
        <div>
            <h3
                class="text-lg md:text-xl font-bold text-text text-ctp-sapphire-100"
            >
                {experience.title}
            </h3>
            {
                experience.companyLink ? (
                    <a
                        href={experience.companyLink}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="text-subtext0 hover:text-blue-400 transition-colors hover:underline text-ctp-flamingo-50"
                    >
                        {experience.company}
                    </a>
                ) : (
                    <p class="text-subtext0">{experience.company}</p>
                )
            }
        </div>
        <div class="text-right">
            <p class="text-subtext1 text-sm">
                {experience.startDate} - {experience.endDate}
            </p>
        </div>
    </div>

    <p class="mt-2 text-subtext1 leading-relaxed text-sm md:text-base">
        {experience.description}
    </p>

    <div class="mt-3 flex flex-wrap gap-2" data-skills-container>
        {
            experience.skills.map((skill, index) => (
                <span
                    class="skill-pill px-2 md:px-3 py-1 md:py-1.5 text-xs md:text-sm font-medium rounded-full
                           text-ctp-base transition-all duration-200 ease-in-out
                           transform hover:scale-105 cursor-default shadow-sm"
                    data-skill-index={index}
                >
                    {skill}
                </span>
            ))
        }
    </div>
</article>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Catppuccin Mocha color palette for backgrounds
        const catppuccinColors = [
            {
                bg: "bg-ctp-rosewater",
                border: "border-ctp-rosewater/30",
                hover: "hover:bg-ctp-rosewater/80",
            },
            {
                bg: "bg-ctp-flamingo",
                border: "border-ctp-flamingo/30",
                hover: "hover:bg-ctp-flamingo/80",
            },
            {
                bg: "bg-ctp-pink",
                border: "border-ctp-pink/30",
                hover: "hover:bg-ctp-pink/80",
            },
            {
                bg: "bg-ctp-mauve",
                border: "border-ctp-mauve/30",
                hover: "hover:bg-ctp-mauve/80",
            },
            {
                bg: "bg-ctp-red",
                border: "border-ctp-red/30",
                hover: "hover:bg-ctp-red/80",
            },
            {
                bg: "bg-ctp-maroon",
                border: "border-ctp-maroon/30",
                hover: "hover:bg-ctp-maroon/80",
            },
            {
                bg: "bg-ctp-peach",
                border: "border-ctp-peach/30",
                hover: "hover:bg-ctp-peach/80",
            },
            {
                bg: "bg-ctp-yellow",
                border: "border-ctp-yellow/30",
                hover: "hover:bg-ctp-yellow/80",
            },
            {
                bg: "bg-ctp-green",
                border: "border-ctp-green/30",
                hover: "hover:bg-ctp-green/80",
            },
            {
                bg: "bg-ctp-teal",
                border: "border-ctp-teal/30",
                hover: "hover:bg-ctp-teal/80",
            },
            {
                bg: "bg-ctp-sky",
                border: "border-ctp-sky/30",
                hover: "hover:bg-ctp-sky/80",
            },
            {
                bg: "bg-ctp-sapphire",
                border: "border-ctp-sapphire/30",
                hover: "hover:bg-ctp-sapphire/80",
            },
            {
                bg: "bg-ctp-blue",
                border: "border-ctp-blue/30",
                hover: "hover:bg-ctp-blue/80",
            },
            {
                bg: "bg-ctp-lavender",
                border: "border-ctp-lavender/30",
                hover: "hover:bg-ctp-lavender/80",
            },
        ];

        // Function to get a seeded random color (consistent for same skill name)
        function getColorForSkill(skillText: string, index: number) {
            let hash = 0;
            for (let i = 0; i < skillText.length; i++) {
                const char = skillText.charCodeAt(i);
                hash = (hash << 5) - hash + char;
                hash = hash & hash; // Convert to 32bit integer
            }
            // Add index to ensure variety even for duplicate skills
            hash = hash + index;
            return catppuccinColors[Math.abs(hash) % catppuccinColors.length];
        }

        // Apply colors to all skill pills
        const skillPills = document.querySelectorAll(".skill-pill");
        skillPills.forEach((pill, index) => {
            const skillText = pill.textContent?.trim();
            const colorSet = getColorForSkill(skillText || "", index);

            // Add the background color classes
            pill.classList.add(colorSet.bg, colorSet.border, colorSet.hover);
        });
    });
</script>
